package plic.analyse ;

import java.util.*;
import plic.arbre.* ;
import plic.arbre.expression.* ;
import plic.arbre.declaration.* ;
import plic.arbre.identificateur.* ;
import plic.exceptions.*;
import plic.TDS.*;

import java_cup.runtime.*;

action code {: 
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.PLUS), "+") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MOINS), "-") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MULT), "*") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIV), "/") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PAROUV), "(") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PARFER), ")") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SUP), ">") ;
        lesTerminaux.put(new Integer(CodesLexicaux.INF), "<") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALEGAL), "==") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIFF), "!=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ET), "et") ;
        lesTerminaux.put(new Integer(CodesLexicaux.OU), "ou") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;
        lesTerminaux.put(new Integer(CodesLexicaux.VIRGULE), ",") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PUBLIQUE), "publique") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PRIVEE), "privee") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ENTIER), "entier") ;
        lesTerminaux.put(new Integer(CodesLexicaux.CLASS), "classe") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CONSTANTEINT, "" + s.value) ;
                lesTerminaux.put(CodesLexicaux.CONSTANTEBOOL, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PLUS, MOINS, MULT, DIV, PAROUV, PARFER, POINTVIRGULE , VIRGULE ;
terminal Symbol    SUP, INF, EGALEGAL, DIFF, ET, OU, NON ;
terminal String    IDF, CONSTANTEINT, CONSTANTEBOOL, PUBLIQUE, PRIVEE, ENTIER , CLASS , FIN;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG ;
non terminal Expression EXPR, CSTE ;
non terminal Declaration DECLARATION, DECL_CHAMP ;
non terminal String TYPE, STATUT ;
non terminal ListeDeclaration LDECLARATION ;
non terminal Classe CLASSE ;
non terminal ListeIdentificateur LIDF ;

precedence left INF, SUP ;
precedence left EGALEGAL, DIFF;
precedence left PLUS, MOINS;
precedence left MULT, DIV ;
precedence left OU ;
precedence left ET ;
precedence left NON ;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=     CLASSE:c
				{: BlocDInstructions arbre = new BlocDInstructions(cleft+1) ;
                   arbre.ajouter(c) ;
                   RESULT = arbre ; :}
		|		/*EXPR:e 
				{: BlocDInstructions arbre = new BlocDInstructions(eleft+1) ;
                   arbre.ajouter(e) ;
                   RESULT = arbre ; :}
        |*/		LDECLARATION:d
        		{: BlocDInstructions arbre = new BlocDInstructions(dleft+1) ;
                   arbre.ajouter(d) ;
                   RESULT = arbre ; :}
                ;
                
CLASSE	::=		CLASS IDF:i LDECLARATION:ld FIN
				{: Classe c = new Classe(ileft+1, new Identificateur(ileft+1, i), ld);
					RESULT = c ; :}
				;
				
LDECLARATION ::= LDECLARATION:ld DECLARATION:d
				{: ld.ajouter(d);
					RESULT = ld ; :}
		|		DECLARATION:d
				{: ListeDeclaration ld = new ListeDeclaration(dleft+1);
					ld.ajouter(d); 
					RESULT = ld; :}
				;
				
DECLARATION ::=	DECL_CHAMP:d
				{: RESULT = d ; :}
				;
                
DECL_CHAMP	::=	STATUT:s TYPE:t LIDF:li POINTVIRGULE
				{: for(Identificateur i : li.iterable()){
						TDS.getInstance().ajouter(new Entree(i), new Symbole(s, t)); 
					}
				   RESULT = new Declaration(lileft+1); :}
				;
				
LIDF	::=		LIDF:li VIRGULE IDF:i
				{: li.ajouter(new Identificateur(ileft+1, i));
					RESULT = li ; :}
		|		IDF:i
				{: ListeIdentificateur li = new ListeIdentificateur(ileft+1);
					li.ajouter(new Identificateur(ileft+1, i)); 
					RESULT = li; :}
				;

STATUT	::= 	PUBLIQUE:p
                {: RESULT = p ; :}
		| 		PRIVEE:p
                {: RESULT = p ; :}
				;
				
TYPE	::= 	ENTIER:e
                {: RESULT = e ; :}
			;

/*******

DECLARATION ::=	DECL_CHAMP
		|		DECL_CONST
				;
				
DECL_CONST	::= { INSTRUCTION }+
				;

INSTRUCTION ::= AFFECT
		|		ECRIRE
				;
		
AFFECT		::= ACCES EGAL EXPR POINTVIRGULE
			;

ACCES		::=	IDF
			;

ECRIRE		::= ecrire EXPR POINTVIRGULE
		|		ecrire csteChaine POINTVIRGULE
			;
*********/
    
EXPR    ::=     EXPR:g  PLUS  EXPR:d
                {: RESULT = new Plus(g, d) ; :}
        | 
                EXPR:g  MOINS  EXPR:d
                {: RESULT = new Moins(g, d); :}
        |                
                EXPR:g  MULT  EXPR:d
                {: RESULT = new Mult(g, d); :}
        |                
                EXPR:g  DIV  EXPR:d
                {: RESULT = new Div(g, d); :}
        |       
                EXPR:g  INF  EXPR:d
                {: RESULT = new Inferieur(g, d); :}
        |       
                EXPR:g  SUP  EXPR:d
                {: RESULT = new Superieur(g, d); :}
        |              
                EXPR:g  EGALEGAL  EXPR:d
                {: RESULT = new Egal(g, d); :}
        |       
                EXPR:g  DIFF  EXPR:d
                {: RESULT = new Different(g, d); :}
        |                      
                MOINS  EXPR:e  
                {: RESULT = new MoinsUnaire(e); :}
        |      
                EXPR:g  ET  EXPR:d
                {: RESULT = new EtLogique(g, d); :}
        |      
                EXPR:g  OU  EXPR:d
                {: RESULT = new OuLogique(g, d); :}
        |      
                NON EXPR:e
                {: RESULT = new NonLogique(e); :}
        |
                CSTE:c
                {: RESULT = c ; :}
        |
                PAROUV  EXPR:e  PARFER
                {: RESULT = e ; :}
                ;

CSTE    ::=     CONSTANTEINT:e 
                {: RESULT = new ConstanteEntiere(e, eleft+1) ; :}
        |       CONSTANTEBOOL:e 
                {: RESULT = new ConstanteBool(e, eleft+1) ; :}
                ;