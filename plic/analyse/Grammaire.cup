package plic.analyse ;

import java.util.*;
import plic.arbre.* ;
import plic.arbre.expression.* ;
import plic.arbre.declaration.* ;
import plic.arbre.identificateur.* ;
import plic.arbre.instruction.*;
import plic.exceptions.*;
import plic.TDS.*;

import java_cup.runtime.*;

action code {: 
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.PLUS), "+") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MOINS), "-") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MULT), "*") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIV), "/") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PAROUV), "(") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PARFER), ")") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SUP), ">") ;
        lesTerminaux.put(new Integer(CodesLexicaux.INF), "<") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGAL), "=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALEGAL), "==") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIFF), "!=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ET), "et") ;
        lesTerminaux.put(new Integer(CodesLexicaux.OU), "ou") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;
        lesTerminaux.put(new Integer(CodesLexicaux.VIRGULE), ",") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINT), ".") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PUBLIQUE), "publique") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PRIVEE), "privee") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ENTIER), "entier") ;
        lesTerminaux.put(new Integer(CodesLexicaux.CLASS), "classe") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.NOUVEAU), "nouveau");
        lesTerminaux.put(new Integer(CodesLexicaux.ECR), "ecrire") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SI), "si") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ALORS), "alors") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SINON), "sinon") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FSI), "fsi") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ENTIER), "entier") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CONSTANTEINT, "" + s.value) ;
                lesTerminaux.put(CodesLexicaux.CONSTANTEBOOL, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            } 

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PLUS, MOINS, MULT, DIV, PAROUV, PARFER, POINTVIRGULE , VIRGULE , POINT ;
terminal Symbol    SUP, INF, EGAL, EGALEGAL, DIFF, ET, OU, NON ;
terminal String    IDF, CONSTANTEINT, CONSTANTEBOOL, PUBLIQUE, PRIVEE, ENTIER , CLASS , DEBUT , FIN ;
terminal String    NOUVEAU, ECR, CONSTANTECHAINE, SI, ALORS, SINON, FSI ;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG ;
non terminal Expression EXPR, CSTE ;
non terminal Declaration DECLARATION, DECL_CHAMP, DECL_CONST ;
non terminal DeclarationVar DECL_VAR ;
non terminal String TYPE, STATUT ;
non terminal ListeDeclaration LDECLARATION ;
non terminal ListeClasse LCLASSE ;
non terminal Classe CLASSE ;
non terminal ListeIdentificateur LIDF ;
non terminal ListeInstruction LINST ;
non terminal Instruction INSTRUCTION ;
non terminal Affectation AFFECT ;
non terminal Acces ACCES ;
non terminal Ecrire ECRIRE ;
non terminal Condition CONDITION ;
non terminal Instanciation INSTANCIATION ;
non terminal Parametres PARAMETRES ;
non terminal String TYPE_RES ; 

precedence left INF, SUP ;
precedence left EGALEGAL, DIFF;
precedence left PLUS, MOINS;
precedence left MULT, DIV ;
precedence left OU ;
precedence left ET ;
precedence left NON ;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=		LCLASSE:lc
				{: BlocDInstructions arbre = new BlocDInstructions(lcleft+1) ;
                   arbre.ajouter(lc) ;
                   TDS.getInstance().setListeClasse(lc);
                   RESULT = arbre ; :}
                ;

LCLASSE	::=     LCLASSE:lc CLASSE:c
				{: boolean existeDeja = false;
					for(Classe classe : lc.getListeClasse()){
						if(classe.getIdf().equals(c.getIdf())){
							existeDeja = true;
						}
					}
					if(existeDeja){
						throw new DoubleDeclException(cleft+1, "La classe \"" + c.getIdf() + "\" est declaree plusieurs fois");
					}
					lc.ajouter(c);
					RESULT = lc ; :}
		|		CLASSE:c
				{: ListeClasse lc = new ListeClasse(cleft+1);
					lc.ajouter(c) ;
                   	RESULT = lc ; :}
                ;
                
CLASSE	::=		CLASS IDF:i LDECLARATION:ld FIN
				{: 	TDS.getInstance().entreeBloc();
					TDS.getInstance().setDicoCourant(TDS.getInstance().getNoBloc());
					Classe c = new Classe(ileft+1, new Identificateur(ileft+1, i), ld);
					RESULT = c ; :}
		|		CLASS IDF:i FIN
				{: TDS.getInstance().entreeBloc();
					TDS.getInstance().setDicoCourant(TDS.getInstance().getNoBloc());
					Classe c = new Classe(ileft+1, new Identificateur(ileft+1, i));
					RESULT = c ; :}
				;
				
LDECLARATION ::= LDECLARATION:ld DECLARATION:d
				{: ld.ajouter(d);
					RESULT = ld ; :}
		|		DECLARATION:d
				{: ListeDeclaration ld = new ListeDeclaration(dleft+1);
					ld.ajouter(d); 
					RESULT = ld; :}
				;
				
DECLARATION ::=	DECL_CHAMP:d
				{: RESULT = d ; :}
		|		DECL_CONST:d
				{: RESULT = d ; :}
				;
                
DECL_CHAMP	::=	STATUT:s TYPE:t LIDF:li POINTVIRGULE
				{: RESULT = new DeclarationChamp(lileft+1, li, t, s, 0); :}
				; 
					
LIDF	::=		LIDF:li VIRGULE IDF:i
				{: li.ajouter(new Identificateur(ileft+1, i));
					RESULT = li ; :}
		|		IDF:i
				{: ListeIdentificateur li = new ListeIdentificateur(ileft+1);
					li.ajouter(new Identificateur(ileft+1, i)); 
					RESULT = li; :}
				;
		
STATUT	::= 	PUBLIQUE:p
                {: RESULT = p ; :}
		| 		PRIVEE:p
                {: RESULT = p ; :}
				;
				
TYPE	::= 	ENTIER:e
                {: RESULT = e ; :}
        |		IDF:i
        		{: RESULT = i; :}
				;
				
DECL_CONST	::= STATUT:s IDF:i PAROUV PARAMETRES:p PARFER DEBUT LINST:li FIN
				{: RESULT = new DeclarationConst(ileft+1, new Identificateur(ileft+1, i), li, 0) ; :}
		|		STATUT:s IDF:i DEBUT FIN
				{: RESULT = new DeclarationConst(ileft+1, new Identificateur(ileft+1, i), null, 0) ; :}
				;
				
PARAMETRES	::=	PAROUV TYPE_RES IDF:i PARFER
				{: RESULT = new Parametres(ileft+1) ; :}
				;
			
TYPE_RES 	::= ENTIER
		|		IDF
		;
				
DECL_VAR	::=	TYPE:t LIDF:li POINTVIRGULE
				{: RESULT = new DeclarationVar(lileft+1, li, t, 0); :}
				;
				
LINST		::= LINST:li INSTRUCTION:i
				{: li.ajouter(i);
					RESULT = li ; :}
		|		INSTRUCTION:i
				{: ListeInstruction li = new ListeInstruction(ileft+1);
					li.ajouter(i); 
					RESULT = li; :}
				;

INSTRUCTION ::= AFFECT:a
				{: RESULT = a ; :}
		|		ECRIRE:e
				{: RESULT = e ; :}
		|		CONDITION:c
				{: RESULT = c ; :}	
		|		DECL_VAR:d
				{: RESULT = d ; :}	
		| 		INSTANCIATION:i
				{: RESULT = i ; :}
				;
				
AFFECT		::= ACCES:a EGAL EXPR:e POINTVIRGULE
				{: Affectation af = new Affectation(eleft+1, a, e, 0);
					RESULT = af ; :}
			; 
			
INSTANCIATION ::= ACCES:a EGAL NOUVEAU IDF:i PAROUV PARFER POINTVIRGULE	
					{: Identificateur idf = new Identificateur(ileft+1,i);
					RESULT = new Instanciation(aleft+1, a, idf, 0); :}
			;

ACCES		::=	IDF:i
				{: Identificateur idf = new Identificateur(ileft+1, i);
					Acces ac = new Acces(ileft+1, idf, null);
					RESULT = ac ; :}	
		|		IDF:i POINT IDF:j
				{:Identificateur idf = new Identificateur(ileft+1, i);
					Identificateur idfBis = new Identificateur(jleft+1, j);
					Acces a = new Acces(ileft+1, idf, idfBis);
					RESULT = a ; :}	
			;
			
CONDITION	::=	SI EXPR:e ALORS LINST:l FSI
				{: Condition c = new Condition(eleft+1, e, l, null, 0) ; 
					RESULT = c ; :}
		| 		SI EXPR:e ALORS LINST:l1 SINON LINST:l2 FSI
				{: Condition c = new Condition(eleft+1, e, l1, l2, 0) ;  
					RESULT = c ; :}
		|		SI EXPR:e ALORS FSI
				{: Condition c = new Condition(eleft+1, e, null, null, 0) ;  
					RESULT = c ; :}
		|		SI EXPR:e ALORS SINON LINST:l FSI
				{: Condition c = new Condition(eleft+1, e, null, l, 0) ;  
					RESULT = c ; :}
			;

ECRIRE		::= ECR EXPR:exp POINTVIRGULE
				{: Ecrire e = new Ecrire(expleft+1, exp, 0);
					RESULT = e ; :}
		|		ECR CONSTANTECHAINE:c POINTVIRGULE
				{: Ecrire e = new Ecrire(cleft+1, c, 0);
					RESULT = e ; :}
			;

EXPR    ::=     EXPR:g  PLUS  EXPR:d
                {: RESULT = new Plus(g, d) ; :}
        | 
                EXPR:g  MOINS  EXPR:d
                {: RESULT = new Moins(g, d); :}
        |                
                EXPR:g  MULT  EXPR:d
                {: RESULT = new Mult(g, d); :}
        |                
                EXPR:g  DIV  EXPR:d
                {: RESULT = new Div(g, d); :}
        |       
                EXPR:g  INF  EXPR:d
                {: RESULT = new Inferieur(g, d); :}
        |       
                EXPR:g  SUP  EXPR:d
                {: RESULT = new Superieur(g, d); :}
        |              
                EXPR:g  EGALEGAL  EXPR:d
                {: RESULT = new Egal(g, d); :}
        |   
                EXPR:g  DIFF  EXPR:d
                {: RESULT = new Different(g, d); :}
        |                      
                MOINS  EXPR:e  
                {: RESULT = new MoinsUnaire(e); :}
        |      
                EXPR:g  ET  EXPR:d
                {: RESULT = new EtLogique(g, d); :}
        |      
                EXPR:g  OU  EXPR:d
                {: RESULT = new OuLogique(g, d); :}
        |      
                NON EXPR:e
                {: RESULT = new NonLogique(e); :}
        |
                CSTE:c
                {: RESULT = c ; :}
        |
                PAROUV  EXPR:e  PARFER
                {: RESULT = e ; :}
        |		
        		IDF:i
        		{: RESULT = new Identificateur(ileft+1, i) ; :}
                ;
 
CSTE    ::=     CONSTANTEINT:e 
                {: RESULT = new ConstanteEntiere(e, eleft+1) ; :}
        |       CONSTANTEBOOL:e 
                {: RESULT = new ConstanteBool(e, eleft+1) ; :}
                ;